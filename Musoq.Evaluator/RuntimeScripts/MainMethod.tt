<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".txt" #>

namespace Musoq.CodeGenerated 
{
	public class TranslatedQuery
	{
		private ISchemaProvider _schemaProvider;

		public TranslatedQuery(ISchemaProvider schemaProvider)
		{
			_schemaProvider = schemaProvider;
		}

		public Func<Table> Run(){
			return () => ComputeQuery();
		}

		public Table ComputeQuery()
		{
			var schema = _schemaProvider.GetSchema("<#= Schema #>");
			var source = schema.GetRowSource(<#= RowSourceMethod #>, new string[] { <#= RowSourceArguments #> });
			var lib = schema.Library;
			var groups = new Dictionary<string, Group>();
			var table = new Table();
	
			foreach(var row in source) {
		
				<# if(ContainsWhereOperator()) { #>

					if(!FitsWhereCondition(row, lib))
						continue;

				<# } #>

				<# if(ContainsGroupingOperator()){ #>

					var groupId = CalculateGroupId(row);
			
					Group group;
					if(groups.ContainsKey(groupId))
						group = groups[groupId];
					else
						group = new Group();

					group.Increment();

					<# foreach(var method in RefreshMethods) { #>

					lib.<#= method #>;

					<# } #>

				<# } else { #>

					var rowValues = new object[<#= Select.Length #>];
					<# int i = 0; #>
					<# foreach(var field in Select) { #>
						rowValues[<#= i++ #>] = <#= field.Expression #>; 
					<# } #>

					table.AddRow(new Row(rowValues));
		
				<# } #>
			}

			return table;
		}

		public bool FitsWhereCondition(IObjectResover row, LibraryBase lib){
			return <#= Where #>;
		}
	}
}
